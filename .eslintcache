[{"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\index.js":"1","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\App.js":"2","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\NotFound.js":"3","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Login.js":"4","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\ProtectedRoute.js":"5","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\Header.js":"6","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\BasicModels.js":"7","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\ServiceHosts.js":"8","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Authentication.js":"9","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\SharedMethods.js":"10","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClass.js":"11","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClasses.js":"12","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Classes.js":"13","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\NewPost.js":"14","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\MyPosts.js":"15","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Class.js":"16","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\Applications.js":"17","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Messenger.js":"18","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chat.js":"19","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chats.js":"20"},{"size":228,"mtime":1610884835799,"results":"21","hashOfConfig":"22"},{"size":3556,"mtime":1616676345630,"results":"23","hashOfConfig":"22"},{"size":1215,"mtime":1616677094674,"results":"24","hashOfConfig":"22"},{"size":2691,"mtime":1616675674047,"results":"25","hashOfConfig":"22"},{"size":749,"mtime":1616676378013,"results":"26","hashOfConfig":"22"},{"size":13258,"mtime":1616676944262,"results":"27","hashOfConfig":"22"},{"size":2876,"mtime":1616674855428,"results":"28","hashOfConfig":"22"},{"size":393,"mtime":1615728495522,"results":"29","hashOfConfig":"22"},{"size":1961,"mtime":1616676044098,"results":"30","hashOfConfig":"22"},{"size":2267,"mtime":1616670450743,"results":"31","hashOfConfig":"22"},{"size":7911,"mtime":1616668759771,"results":"32","hashOfConfig":"22"},{"size":4198,"mtime":1616668759742,"results":"33","hashOfConfig":"22"},{"size":4147,"mtime":1616677201663,"results":"34","hashOfConfig":"22"},{"size":8394,"mtime":1616677470172,"results":"35","hashOfConfig":"22"},{"size":6052,"mtime":1616668973741,"results":"36","hashOfConfig":"22"},{"size":7899,"mtime":1616677377582,"results":"37","hashOfConfig":"22"},{"size":5092,"mtime":1616677257429,"results":"38","hashOfConfig":"22"},{"size":2295,"mtime":1616668862789,"results":"39","hashOfConfig":"22"},{"size":8333,"mtime":1616668932410,"results":"40","hashOfConfig":"22"},{"size":11981,"mtime":1616668938186,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"3dz5wn",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\index.js",[],["85","86"],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\App.js",["87"],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\NotFound.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Login.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\ProtectedRoute.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\Header.js",["88","89"],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\BasicModels.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\ServiceHosts.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Authentication.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\SharedMethods.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClass.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClasses.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Classes.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\NewPost.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\MyPosts.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Class.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\Applications.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Messenger.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chat.js",["90","91"],"import React from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport BasicModels from '../../Tools/BasicModels';\r\nimport './Chat.css';\r\nimport ServiceHosts from '../../Tools/ServiceHosts';\r\nimport SharedMethods from '../../Tools/SharedMethods';\r\nimport Authentication from '../../authentication/Authentication';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            activeChatroom: null,\r\n            conversation: [],\r\n            conversationQueue: \"\",\r\n            message: \"\",\r\n            chatClient: null\r\n        };\r\n\r\n        this.getConversation = this.getConversation.bind(this);\r\n        this.getConversationQueue = this.getConversationQueue.bind(this);\r\n        this.subscribeToConversationQueue = this.subscribeToConversationQueue.bind(this);\r\n        this.subscribeToConversationQueueCallback = this.subscribeToConversationQueueCallback.bind(this);\r\n        this.disconnectFromQueue = this.disconnectFromQueue.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.onMessageChange = this.onMessageChange.bind(this);\r\n        this.chatFilter = this.chatFilter.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        if(this.state.activeChatroom !== this.props.activeChatroom) {\r\n            this.setState({\r\n                activeChatroom: this.props.activeChatroom\r\n            }, \r\n                ()=>{this.getConversation()}\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.state.activeChatroom !== this.props.activeChatroom) {\r\n            this.setState({\r\n                activeChatroom: this.props.activeChatroom\r\n            }, \r\n                ()=>{this.getConversation()}\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n        this.disconnectFromQueue();\r\n    }\r\n\r\n    async getConversation() {\r\n\r\n        if (!this._isMounted) {return;}\r\n        \r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            return;\r\n        }\r\n\r\n        var url = ServiceHosts.getMessengerHost()+\"/messenger/conversation\";\r\n        \r\n        var jsonBody = JSON.stringify({body:this.state.activeChatroom});\r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                conversation: sucess.body\r\n            }, () => {\r\n                this.chatFilter();\r\n                if (this.state.conversationQueue === \"\") {\r\n                    this.getConversationQueue();\r\n                }\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async getConversationQueue() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getNotificationsHost()+\"/notifications/get/conversation-queue\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                conversationQueue: sucess.body.queue\r\n            }, () => {\r\n                this.subscribeToConversationQueue();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async subscribeToConversationQueue() {\r\n\r\n        if (typeof this.state.conversationQueue === \"undefined\" || this.state.conversationQueue === \"\" || this.state.conversationQueue === null) {\r\n            return;\r\n        }\r\n\r\n        var ws = new SockJS(ServiceHosts.getNotificationsHost()+'/ws');\r\n        var client = Stomp.over(ws);\r\n        client.debug = null;\r\n\r\n        var headers = {\r\n          \"login\": \"guest\",\r\n          \"passcode\": \"guest\",\r\n          'X-Authorization': localStorage.getItem(\"jwt\")\r\n        };\r\n\r\n        client.connect(\r\n            headers, \r\n            () => {\r\n\r\n                var subscription = client.subscribe(\r\n                    \"/queue/\" + this.state.conversationQueue, \r\n                    this.subscribeToConversationQueueCallback,\r\n                    {'X-Authorization': localStorage.getItem(\"jwt\")}\r\n                );\r\n\r\n            },(error) => { console.log(error); }\r\n        );\r\n\r\n        // client.heartbeat.outgoing = 1000; // client will send heartbeats every 20000ms\r\n        // client.heartbeat.incoming = 0;\r\n\r\n        this.setState({\r\n            client: client\r\n        });\r\n\r\n    }\r\n\r\n    subscribeToConversationQueueCallback(object) {\r\n        var message = JSON.parse(object.body);\r\n        this.getConversation();\r\n    }\r\n\r\n    disconnectFromQueue() {\r\n        if(this.state.client !== null && this.state.client !== undefined) {\r\n            this.state.client.disconnect(()=>{\r\n                //console.log(\"disconected\");\r\n            });    \r\n        }\r\n    }\r\n\r\n    async sendMessage() {\r\n\r\n        let url = ServiceHosts.getMessengerHost()+\"/messenger/message\";\r\n\r\n        let body = BasicModels.getMessageModel();\r\n        body.chatroom = this.state.activeChatroom;\r\n        body.message = this.state.message;\r\n        let jsonBody = JSON.stringify({body:body});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.getConversation();\r\n            this.setState({\r\n                message: \"\"\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    chatFilter() {\r\n\r\n        var chatContainer = document.getElementById(\"chatContainer\");\r\n\r\n        chatContainer.scrollTop = chatContainer.scrollHeight;\r\n\r\n        var conversation = this.state.conversation;\r\n\r\n        conversation.sort((a, b) => {\r\n            return a.timestamp - b.timestamp;\r\n        });\r\n\r\n        this.setState({\r\n            conversation: conversation\r\n        });\r\n\r\n    }\r\n\r\n    onMessageChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        var conversation = this.state.conversation.map((message, index) => {\r\n            var receiveOrSendCss = (message.senderUser.username === localStorage.getItem(\"username\")) ? \"sended\" : \"received\";\r\n            return (\r\n                <div className={\"message-body \"+receiveOrSendCss} key={\"chat_conversation_\"+index}>\r\n                    <div className={\"message \"+receiveOrSendCss}>\r\n                        {message.message}\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        {SharedMethods.dateSince(message.timestamp)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        conversation = conversation.length > 0 ? conversation : \"Say Hello!\";\r\n        let conversationTitle = \"\";\r\n\r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            conversation = \"Choose a conversation to send messages\";\r\n        } else {\r\n            let chatroomName = this.state.activeChatroom.chatroomName.replace(localStorage.getItem(\"name\"), \"\");\r\n            chatroomName = chatroomName.replace(localStorage.getItem(\"lastname\"), \"\");\r\n            conversationTitle = chatroomName;\r\n        }\r\n\r\n        return(\r\n            <div className=\"Chat\">\r\n\r\n                <div className=\"title\">\r\n                    <button onClick={this.props.toggleChats} >\r\n                        <i className=\"fa fa-users\" />\r\n                    </button>\r\n                    <p>{conversationTitle}</p>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n\r\n                    <div className=\"chat\" id=\"chatContainer\">\r\n                        {conversation}\r\n                    </div>\r\n\r\n                    <div className=\"keyboard\">\r\n                        \r\n                        <textarea \r\n                            placeholder=\"Hello\"\r\n                            value={this.state.message} \r\n                            onChange={this.onMessageChange}  />\r\n\r\n                        <button onClick={this.sendMessage}>\r\n                            <i className=\"fa fa-paper-plane\" />\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chats.js",["92","93"],"import React from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport './Chats.css';\r\nimport ServiceHosts from '../../Tools/ServiceHosts';\r\nimport SharedMethods from '../../Tools/SharedMethods';\r\nimport Authentication from '../../authentication/Authentication';\r\n\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass Chats extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            chatrooms: [],\r\n            chatroomsQueue: \"\",\r\n            client: null,\r\n            chatroomId: \"\",\r\n            receiverUsername: \"\",\r\n            activeChatroom: null\r\n        };\r\n\r\n        this.initializeChat = this.initializeChat.bind(this);\r\n        this.getChatrooms = this.getChatrooms.bind(this);\r\n        this.getChatroomsQueue = this.getChatroomsQueue.bind(this);\r\n        this.subscribeToChatroomsQueue = this.subscribeToChatroomsQueue.bind(this);\r\n        this.subscribeToChatroomsQueueCallback = this.subscribeToChatroomsQueueCallback.bind(this);\r\n        this.disconnectFromQueue = this.disconnectFromQueue.bind(this);\r\n        this.activateChat = this.activateChat.bind(this);\r\n        this.onChatClick = this.onChatClick.bind(this);\r\n        this.initializeActiveChatroom = this.initializeActiveChatroom.bind(this);\r\n        this.chatroomReceived = this.chatroomReceived.bind(this);\r\n        this.filterChatrooms = this.filterChatrooms.bind(this);\r\n    }\r\n\r\n    initializeChat() {\r\n        if (typeof this.props.match !== \"undefined\" && typeof this.props.match.params !== \"undefined\") {\r\n            if (typeof this.props.match.params.chatroomId !== \"undefined\") {\r\n                this.setState({\r\n                    chatroomId: this.props.match.params.chatroomId\r\n                }, () => {\r\n                    this.initializeActiveChatroom(\"chatroomId\");\r\n                });\r\n            } else if (typeof this.props.match.params.username !== \"undefined\") {\r\n                this.setState({\r\n                    receiverUsername: this.props.match.params.username\r\n                }, () => {\r\n                    this.initializeActiveChatroom(\"receiverUsername\");\r\n                });\r\n            } else {\r\n                this.getChatrooms();    \r\n            }\r\n        } else {\r\n            this.getChatrooms();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.initializeChat();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (typeof this.props.match !== \"undefined\" && typeof this.props.match.params !== \"undefined\") {\r\n            if (typeof this.props.match.params.chatroomId !== \"undefined\") {\r\n                if (this.state.chatroomId !== this.props.match.params.chatroomId) {\r\n                    this.setState({\r\n                        chatroomId: this.props.match.params.chatroomId\r\n                    }, () => {\r\n                        this.initializeChat();\r\n                    });\r\n                }\r\n            } else if (typeof this.props.match.params.username !== \"undefined\") {\r\n                if (this.state.receiverUsername !== this.props.match.params.username) {\r\n                    this.setState({\r\n                        receiverUsername: this.props.match.params.username\r\n                    }, () => {\r\n                        this.initializeChat();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n        this.disconnectFromQueue();\r\n    }\r\n\r\n    async initializeActiveChatroom(commingFrom) {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = \"\";\r\n        var data = \"\";\r\n        if (commingFrom === \"receiverUsername\") {\r\n            if (typeof this.state.receiverUsername === \"undefined\" || this.state.receiverUsername === \"\") {\r\n                return;\r\n            }\r\n            url = ServiceHosts.getMessengerHost()+\"/messenger/chatroom/initialize\";\r\n            data = this.state.receiverUsername;\r\n        } else if (commingFrom === \"chatroomId\") {\r\n            if (typeof this.state.chatroomId === \"undefined\" || this.state.chatroomId === \"\") {\r\n                return;\r\n            }\r\n            url = ServiceHosts.getMessengerHost()+\"/messenger/get/chatroom\";\r\n            data = this.state.chatroomId;\r\n        }\r\n        var jsonBody = JSON.stringify({body:data});\r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                activeChatroom: sucess.body\r\n            }, () => {\r\n                this.getChatrooms();\r\n                this.activateChat();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async getChatrooms() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getMessengerHost()+\"/messenger/chatrooms\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (success) => {\r\n            this.setState({\r\n                chatrooms: success.body\r\n            }, () => {\r\n\r\n                this.getChatroomsQueue();\r\n                \r\n                if (typeof this.state.activeChatroom !== \"undefined\" && \r\n                    this.state.activeChatroom !== null &&\r\n                    this.state.activeChatroom.chatroomId !== \"\") {\r\n\r\n                        let matchChatroom = this.state.chatrooms.filter(chatroom => chatroom.chatroomId === this.state.activeChatroom.chatroomId);\r\n                        \r\n                        if (matchChatroom === null || typeof matchChatroom === \"undefined\" || matchChatroom.length < 1) {\r\n                            var chatrooms = this.state.chatrooms;\r\n                            chatrooms.push(this.state.activeChatroom);\r\n                            this.setState({\r\n                                chatrooms: chatrooms\r\n                            }, () => {\r\n                                this.filterChatrooms();\r\n                            });\r\n                        } else {\r\n                            this.filterChatrooms();\r\n                        }\r\n                } else {\r\n                    this.filterChatrooms();\r\n                }\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async getChatroomsQueue() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getNotificationsHost()+\"/notifications/get/chatrooms-queue\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                chatroomsQueue: sucess.body.queue\r\n            }, () => {\r\n                this.subscribeToChatroomsQueue();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async subscribeToChatroomsQueue() {\r\n\r\n        if (typeof this.state.chatroomsQueue === \"undefined\" || this.state.chatroomsQueue === \"\" || this.state.chatroomsQueue === null) {\r\n            return;\r\n        }\r\n\r\n        var ws = new SockJS(ServiceHosts.getNotificationsHost()+'/ws');\r\n        var client = Stomp.over(ws);\r\n        client.debug = null;\r\n\r\n        var headers = {\r\n          \"login\": \"guest\",\r\n          \"passcode\": \"guest\",\r\n          'X-Authorization': localStorage.getItem(\"jwt\")\r\n        };\r\n\r\n        client.connect(\r\n            headers, \r\n            () => {\r\n\r\n                var subscription = client.subscribe(\r\n                    \"/queue/\" + this.state.chatroomsQueue, \r\n                    this.subscribeToChatroomsQueueCallback,\r\n                    {'X-Authorization': localStorage.getItem(\"jwt\")}\r\n                );\r\n\r\n            },(error) => { console.log(error); }\r\n        );\r\n\r\n        // client.heartbeat.outgoing = 1000; // client will send heartbeats every 20000ms\r\n        // client.heartbeat.incoming = 0;\r\n\r\n        this.setState({\r\n            client: client\r\n        });\r\n\r\n    }\r\n\r\n    async chatroomReceived() {\r\n\r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            return;\r\n        }\r\n\r\n        var url = ServiceHosts.getMessengerHost()+\"/messenger/chatroom-received\";\r\n\r\n        var jsonBody = JSON.stringify({body: this.state.activeChatroom});\r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.getChatrooms();\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    subscribeToChatroomsQueueCallback(object) {\r\n        var othersUsername = object.body;\r\n        this.getChatrooms();\r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            return;\r\n        }\r\n        this.chatroomReceived();\r\n    }\r\n\r\n    disconnectFromQueue() {\r\n        if(this.state.client !== null && typeof this.state.client !== \"undefined\") {\r\n            this.state.client.disconnect(()=>{\r\n                //console.log(\"disconected\");\r\n            });    \r\n        }\r\n    }\r\n\r\n    activateChat() {\r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            return;\r\n        }\r\n        this.props.activeChatSet(this.state.activeChatroom);\r\n        this.chatroomReceived();\r\n    }\r\n\r\n    onChatClick(e) {\r\n        var chatroomId = e.target.id.split(\"____\")[1];\r\n        this.props.history.push(\"student/messenger/chatroom/\"+chatroomId);\r\n    }\r\n\r\n    filterChatrooms() {\r\n        if (typeof this.state.chatrooms === \"undefined\" || this.state.chatrooms === [] || this.state.chatrooms === null) {\r\n            return;\r\n        }\r\n        let chatrooms = [];\r\n        this.state.chatrooms.forEach(chatroom => {\r\n            // update the .receive property to this user seen status\r\n            let received = false;\r\n            chatroom.users.forEach(user => { \r\n                if (user.received && user.username === localStorage.getItem(\"username\")) \r\n                    received = true; \r\n            });\r\n            chatroom.chatroomReceived = received;\r\n            // remove this user name, lastname from chatrooms name\r\n            let chatroomName = chatroom.chatroomName.replace(localStorage.getItem(\"name\"), \"\");\r\n            chatroomName = chatroomName.replace(localStorage.getItem(\"lastname\"), \"\");\r\n            \r\n            chatroom.chatroomName = chatroomName;\r\n\r\n            chatrooms.push(chatroom);\r\n        });\r\n        this.setState({\r\n            chatrooms: chatrooms\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let showChatsCss = (this.props.showChats) ? \"\" : \"showPanelFromLeft\";\r\n\r\n        let chats = this.state.chatrooms.length > 0 ? this.state.chatrooms.map((conversation, index) => {\r\n            var newMessagesIcon =  conversation.chatroomReceived ? \"\" : <i className=\"fa fa-comment\" />;\r\n            return (\r\n                <div className=\"chat\" key={\"chats_index\"+index}>\r\n                    <div className=\"title\"\r\n                        id={\"conversations____\"+conversation.chatroomId}\r\n                        onClick={this.onChatClick}>\r\n                            {conversation.chatroomName}\r\n                            {newMessagesIcon}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }) : \"No Conversations Active\";\r\n\r\n        return(\r\n            <div className={\"Chats hidePanelToLeft \" + showChatsCss}>\r\n\r\n                <div className=\"title\">\r\n                    <p>chatrooms</p>\r\n                    <button onClick={this.props.toggleChats} >\r\n                        <i className=\"fa fa-times-circle\" />\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    {chats}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Chats);",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":24,"column":3,"nodeType":"100","messageId":"101","endLine":26,"endColumn":4},{"ruleId":"102","severity":1,"message":"103","line":173,"column":21,"nodeType":"104","messageId":"105","endLine":173,"endColumn":33},{"ruleId":"102","severity":1,"message":"106","line":194,"column":13,"nodeType":"104","messageId":"105","endLine":194,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":124,"column":21,"nodeType":"104","messageId":"105","endLine":124,"endColumn":33},{"ruleId":"102","severity":1,"message":"106","line":143,"column":13,"nodeType":"104","messageId":"105","endLine":143,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":204,"column":21,"nodeType":"104","messageId":"105","endLine":204,"endColumn":33},{"ruleId":"102","severity":1,"message":"107","line":239,"column":13,"nodeType":"104","messageId":"105","endLine":239,"endColumn":27},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'subscription' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","'othersUsername' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]