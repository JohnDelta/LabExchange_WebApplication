[{"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\index.js":"1","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\App.js":"2","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\NotFound.js":"3","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Login.js":"4","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\ProtectedRoute.js":"5","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\Header.js":"6","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\BasicModels.js":"7","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\ServiceHosts.js":"8","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Authentication.js":"9","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\SharedMethods.js":"10","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClass.js":"11","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClasses.js":"12","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Classes.js":"13","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\NewPost.js":"14","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\MyPosts.js":"15","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Class.js":"16","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\Applications.js":"17","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Messenger.js":"18","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chat.js":"19","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chats.js":"20","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorLab.js":"21","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\LabExchanges.js":"22"},{"size":228,"mtime":1610884835799,"results":"23","hashOfConfig":"24"},{"size":4131,"mtime":1617527317272,"results":"25","hashOfConfig":"24"},{"size":1215,"mtime":1616677094674,"results":"26","hashOfConfig":"24"},{"size":2691,"mtime":1616675674047,"results":"27","hashOfConfig":"24"},{"size":749,"mtime":1616676378013,"results":"28","hashOfConfig":"24"},{"size":13375,"mtime":1616937994615,"results":"29","hashOfConfig":"24"},{"size":3309,"mtime":1617531274096,"results":"30","hashOfConfig":"24"},{"size":393,"mtime":1615728495522,"results":"31","hashOfConfig":"24"},{"size":2646,"mtime":1616936912915,"results":"32","hashOfConfig":"24"},{"size":2296,"mtime":1616919654263,"results":"33","hashOfConfig":"24"},{"size":5609,"mtime":1617044629639,"results":"34","hashOfConfig":"24"},{"size":3740,"mtime":1616938480523,"results":"35","hashOfConfig":"24"},{"size":4155,"mtime":1616847483890,"results":"36","hashOfConfig":"24"},{"size":9520,"mtime":1617529370871,"results":"37","hashOfConfig":"24"},{"size":7249,"mtime":1617533008298,"results":"38","hashOfConfig":"24"},{"size":8159,"mtime":1617531274096,"results":"39","hashOfConfig":"24"},{"size":4978,"mtime":1617533042767,"results":"40","hashOfConfig":"24"},{"size":6595,"mtime":1616934029357,"results":"41","hashOfConfig":"24"},{"size":8358,"mtime":1616936481106,"results":"42","hashOfConfig":"24"},{"size":9286,"mtime":1616933325183,"results":"43","hashOfConfig":"24"},{"size":3987,"mtime":1616941429350,"results":"44","hashOfConfig":"24"},{"size":6816,"mtime":1617304325882,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"3dz5wn",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\index.js",[],["97","98"],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\App.js",["99"],"import React from 'react';\r\nimport './App.css';\r\nimport Messenger from './StudentViews/messenger/Messenger';\r\nimport Classes from './StudentViews/classComponents/Classes';\r\nimport Class from './StudentViews/classComponents/Class';\r\nimport NewPost from './StudentViews/postComponents/NewPost';\r\nimport MyPosts from './StudentViews/postComponents/MyPosts';\r\nimport Applications from './StudentViews/postComponents/Applications';\r\nimport ProtectedRoute from './authentication/ProtectedRoute';\r\nimport Login from './authentication/Login';\r\nimport NotFound from './UIComponents/NotFound';\r\nimport BasicModels from './Tools/BasicModels';\r\nimport ProfessorClasses from './ProfessorViews/ProfessorClasses';\r\nimport ProfessorClass from './ProfessorViews/ProfessorClass';\r\nimport ProfessorLab from './ProfessorViews/ProfessorLab';\r\nimport LabExchanges from './ProfessorViews/LabExchanges';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <Router>\r\n          <Switch>\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path={\"/professor/(classes)?\"}\r\n              requiredUserType={BasicModels.UserTypeProfessor()}\r\n              component={ProfessorClasses}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path={\"/professor/class/:id/lab-exchanges\"}\r\n              requiredUserType={BasicModels.UserTypeProfessor()}\r\n              component={LabExchanges}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/professor/class/:id\"\r\n              requiredUserType={BasicModels.UserTypeProfessor()}\r\n              component={ProfessorClass}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/professor/lab/:link/:id\"\r\n              requiredUserType={BasicModels.UserTypeProfessor()}\r\n              component={ProfessorLab}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path={\"/student/(classes)?\"}\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Classes}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/class/:id\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Class}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/post/new/:link\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={NewPost}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/post/my-posts\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={MyPosts}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/post/applications\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Applications}\r\n            />\r\n\r\n            <Route \r\n              exact \r\n              path=\"/(login)?\" \r\n              component={Login} \r\n            />\r\n          \r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/messenger\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Messenger}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/messenger/user/:username?\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Messenger}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/student/messenger/chatroom/:chatroomId?\"\r\n              requiredUserType={BasicModels.UserTypeStudent()}\r\n              component={Messenger}\r\n            />\r\n\r\n            <Route \r\n              path=\"*\"\r\n              component={NotFound}\r\n            />\r\n          \r\n          </Switch>\r\n        </Router>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\NotFound.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Login.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\ProtectedRoute.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\UIComponents\\Header.js",["100","101","102"],"import React from 'react';\r\nimport './Header.css';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport BasicModels from '../Tools/BasicModels';\r\nimport ServiceHosts from '../Tools/ServiceHosts';\r\nimport SharedMethods from '../Tools/SharedMethods';\r\nimport Authentication from '../authentication/Authentication';\r\n\r\nclass Header extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n\r\n        this.state = {\r\n            notificationQueue: \"\",\r\n            notifications: [],\r\n            client: null\r\n        };\r\n\r\n        this.onTabClick = this.onTabClick.bind(this);\r\n        this.toggleNotificationsPanel = this.toggleNotificationsPanel.bind(this);\r\n        this.openNotification = this.openNotification.bind(this);\r\n        this.attachNotificationPanelToButton = this.attachNotificationPanelToButton.bind(this);\r\n        this.loadNotifications = this.loadNotifications.bind(this);\r\n        this.getNotificationQueue = this.getNotificationQueue.bind(this);\r\n        this.subscribeToNoficationQueue = this.subscribeToNoficationQueue.bind(this);\r\n        this.subscribeToNotificationQueueCallback = this.subscribeToNotificationQueueCallback.bind(this);\r\n        this.getNotificationTitle = this.getNotificationTitle.bind(this);\r\n        this.getNotificationLink = this.getNotificationLink.bind(this);\r\n        this.notificationsFilter = this.notificationsFilter.bind(this);\r\n        this.receiveNotification = this.receiveNotification.bind(this);\r\n        this.disconnectFromQueue = this.disconnectFromQueue.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.attachNotificationPanelToButton();\r\n\r\n        // ref: https://stackoverflow.com/questions/641857/javascript-window-resize-event\r\n        var addEvent = function(object, type, callback) {\r\n            if (object == null || typeof(object) == 'undefined') return;\r\n            if (object.addEventListener) {\r\n                object.addEventListener(type, callback, false);\r\n            } else if (object.attachEvent) {\r\n                object.attachEvent(\"on\" + type, callback);\r\n            } else {\r\n                object[\"on\"+type] = callback;\r\n            }\r\n        };\r\n\r\n        addEvent(window, \"resize\", this.attachNotificationPanelToButton);\r\n        this.getNotificationQueue();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n        this.disconnectFromQueue();\r\n    }\r\n\r\n    onTabClick(e) {\r\n        \r\n        let elements = document.getElementsByClassName(\"tab\");\r\n        for(let i = 0; i < elements.length; i++) {\r\n            elements[i].classList.remove(\"active-tab\");\r\n        }\r\n        e.target.classList.add(\"active-tab\");\r\n\r\n        this.props.history.push(e.target.id.split(\"_\")[0]);\r\n        \r\n    }\r\n\r\n    toggleNotificationsPanel(e) {\r\n\r\n        let notificationsButtonElement = e.target;\r\n        let notificationsPanelElement = document.getElementById(\"notificationsPanel\");\r\n\r\n        let icon = notificationsButtonElement.firstElementChild.firstElementChild;\r\n\r\n        icon.classList.toggle(\"fa-times\");\r\n        icon.classList.toggle(\"fa-bell\");\r\n\r\n        notificationsPanelElement.classList.toggle(\"notifications-panel-active\");\r\n\r\n    }\r\n\r\n    attachNotificationPanelToButton() {\r\n\r\n        let notificationsButtonElement = document.getElementById(\"notificationsButton\");\r\n        let notificationsPanelElement = document.getElementById(\"notificationsPanel\");\r\n\r\n        if (notificationsButtonElement !== null && notificationsPanelElement !== null) {\r\n\r\n            var rect = notificationsButtonElement.getBoundingClientRect();\r\n            notificationsPanelElement.style.top = (rect.top + 50) + 'px';\r\n            notificationsPanelElement.style.left = (rect.left - 215) + 'px';\r\n        \r\n        }\r\n\r\n    }\r\n\r\n    openNotification(e) {\r\n        var vars = e.target.id.split(\"___\");\r\n        var link = vars[1];\r\n        var notificationId = vars[2];\r\n        this.receiveNotification(notificationId);\r\n        this.props.history.push(link);\r\n    }\r\n\r\n    async loadNotifications() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        if (typeof this.state.notificationQueue === \"undefined\" || this.state.notificationQueue === \"\" || this.state.notificationQueue === null) {\r\n            return;\r\n        }\r\n\r\n        let url = ServiceHosts.getNotificationsHost()+\"/notifications/get/notifications\";\r\n        let data = BasicModels.getNotificationQueueModel();\r\n        data.notificationQueueId = this.state.notificationQueue;\r\n        let jsonBody = JSON.stringify({body:data});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                notifications: sucess.body\r\n            }, () => {\r\n                this.notificationsFilter();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async getNotificationQueue() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getNotificationsHost()+\"/notifications/get/notification-queue\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                notificationQueue: sucess.body.queue\r\n            }, () => {\r\n                this.loadNotifications();\r\n                this.subscribeToNoficationQueue();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    subscribeToNoficationQueue() {\r\n\r\n        if (!this._isMounted) {return;}\r\n        \r\n        if (typeof this.state.notificationQueue === \"undefined\" || this.state.notificationQueue === \"\" || this.state.notificationQueue === null) {\r\n            return;\r\n        }\r\n\r\n        var ws = new SockJS(ServiceHosts.getNotificationsHost()+'/ws');\r\n        var client = Stomp.over(ws);\r\n        client.debug = null;\r\n\r\n        var headers = {\r\n          \"login\": \"guest\",\r\n          \"passcode\": \"guest\",\r\n          'X-Authorization': localStorage.getItem(\"jwt\")\r\n        };\r\n\r\n        client.connect(\r\n            headers, \r\n            () => {\r\n\r\n                var subscription = client.subscribe(\r\n                    \"/queue/\" + this.state.notificationQueue, \r\n                    this.subscribeToNotificationQueueCallback,\r\n                    {'X-Authorization': localStorage.getItem(\"jwt\")}\r\n                );\r\n\r\n            },(error) => { console.log(error); }\r\n        );\r\n\r\n        // client.heartbeat.outgoing = 1000; // client will send heartbeats every 20000ms\r\n        // client.heartbeat.incoming = 0;\r\n\r\n        this.setState({\r\n            client: client\r\n        });\r\n\r\n    }\r\n\r\n    subscribeToNotificationQueueCallback(object) {\r\n        if (!this._isMounted) {return;}\r\n        this.props.remountHeader();\r\n        var message = JSON.parse(object.body);\r\n        this.loadNotifications();\r\n    }\r\n\r\n    disconnectFromQueue() {\r\n        if(this.state.client !== null && typeof this.state.client !== \"undefined\") {\r\n            this.state.client.disconnect();    \r\n        }\r\n    }\r\n\r\n    getNotificationTitle(notificationType) {\r\n        \r\n        let message = \"\";\r\n\r\n        if (notificationType === BasicModels.NotificationTypeNewMessage()) {\r\n            message = \"You've got a new message!\";\r\n        } else if (notificationType === BasicModels.NotificationTypeLabExchanged()) {\r\n            message = \"You've Exchanged your lab!\";\r\n        } else if (notificationType === BasicModels.NotificationTypeNewApplication()) {\r\n            message = \"Someone applied to your post!\";\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    getNotificationLink(notificationType) {\r\n        \r\n        let link = \"\";\r\n        \r\n        if (notificationType === BasicModels.NotificationTypeNewMessage()) {\r\n            link = \"/student/messenger\";\r\n        } else if (notificationType === BasicModels.NotificationTypeLabExchanged()) {\r\n            link = \"/student/my-labs\";\r\n        } else if (notificationType === BasicModels.NotificationTypeNewApplication()) {\r\n            link = \"/student/post/applications\";\r\n        }\r\n\r\n        return link;\r\n    }\r\n\r\n    notificationsFilter() {\r\n        if (!this._isMounted) {return;}\r\n\r\n        var notifications = this.state.notifications;\r\n        notifications.sort((a, b) => {\r\n            return b.timestamp - a.timestamp;\r\n        });\r\n        this.setState({\r\n            notifications: notifications\r\n        });\r\n    }\r\n\r\n    async receiveNotification(notificationId) {\r\n\r\n        let url = ServiceHosts.getNotificationsHost()+\"/notifications/notification-received\";\r\n\r\n        let data = BasicModels.getNotificationModel();\r\n        data.notificationId = notificationId;\r\n        let jsonBody = JSON.stringify({body:data}); \r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {}, (err) => {});\r\n\r\n    }\r\n \r\n    render() {\r\n\r\n        let unreceivedNotificationsNumber = this.state.notifications.filter(notification => !notification.received).length;\r\n        let notificationsNumber = unreceivedNotificationsNumber > 0 ? <div className=\"notifications-button-total\"><span>{unreceivedNotificationsNumber}</span></div> : '';\r\n        notificationsNumber = unreceivedNotificationsNumber > 99 ? <div className=\"notifications-button-total\"><span>99+</span></div> : notificationsNumber;\r\n        \r\n        let notifications = this.state.notifications.map((notification) => {\r\n            let receivedCss = notification.received ? \"notification-received\" : \"\";\r\n            return (\r\n                <div className={\"notification \" + receivedCss}\r\n                    onClick={this.openNotification}\r\n                    key={\"notification\" + notification.notificationId}\r\n                    id={\"notification_\" + notification.notificationId + \"___\" + this.getNotificationLink(notification.notificationType) + \"___\" + notification.notificationId}>\r\n                    <div className=\"notification-message\">{this.getNotificationTitle(notification.notificationType)}</div>\r\n                    <div className=\"notification-time\">{SharedMethods.dateSince(notification.timestamp)}</div>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        notifications = (notifications.length > 0) ? notifications : \"You don't have any notifications yet.\";\r\n\r\n        let lowerLayoutCss = \"lower-layout-2-columns\";\r\n        let studentButtons = [];\r\n        if (localStorage.getItem(\"userType\") === BasicModels.UserTypeStudent()) {\r\n            studentButtons.push(\r\n                <button\r\n                    className={\"tab \" + ((this.props.activeTab === \"my-posts\") ? \"active-tab\" : \"\")} \r\n                    onClick={this.onTabClick} \r\n                    id=\"/student/post/my-posts_1\" \r\n                    key=\"header_student_mypost\">My Posts</button>,\r\n                <button\r\n                    className={\"tab \" + ((this.props.activeTab === \"applications\") ? \"active-tab\" : \"\")} \r\n                    onClick={this.onTabClick} \r\n                    id=\"/student/post/applications_2\"\r\n                    key=\"header_student_applications\">Applications</button>,\r\n                <button\r\n                    className={\"tab \" + ((this.props.activeTab === \"messenger\") ? \"active-tab\" : \"\")} \r\n                    onClick={this.onTabClick} \r\n                    id=\"/student/messenger_3\"\r\n                    key=\"header_student_messenger\">Chat</button>\r\n            );\r\n            lowerLayoutCss = \"\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"Header\">\r\n                <div className=\"Header-body-wrapper\">\r\n\r\n                    <div className=\"upper\">\r\n                        <div className=\"title\">\r\n                            <span>LabExchange ({localStorage.getItem(\"username\")})</span>\r\n                        </div>\r\n\r\n                        <button className=\"back-button\" onClick={() => {Authentication.logout(this.props.history);}} >\r\n                            <i className=\"fa fa-sign-out\"></i>\r\n                            <span>Exit</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className={\"lower\" + \" \" + lowerLayoutCss}>\r\n\r\n                        <button\r\n                            className={\"tab \" + ((this.props.activeTab === \"class\") ? \"active-tab\" : \"\")} \r\n                            onClick={this.onTabClick} \r\n                            id={\"/\" + localStorage.getItem(\"userType\").toLowerCase() + \"/classes_0\"}>Classes</button>\r\n\r\n                        {studentButtons}\r\n\r\n                        <button\r\n                            className=\"notifications-button\" \r\n                            id=\"notificationsButton\"\r\n                            onClick={this.toggleNotificationsPanel}>\r\n                                <div className=\"notifications-button-body\">\r\n                                    <i className=\"fa fa-bell\" />\r\n                                    {notificationsNumber}\r\n                                </div>\r\n                        </button>\r\n\r\n                        <div className=\"notifications-panel\" id=\"notificationsPanel\">\r\n                            {notifications}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\BasicModels.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\ServiceHosts.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\authentication\\Authentication.js",["103"],"import BasicModels from '../Tools/BasicModels.js';\r\nimport ServiceHosts from '../Tools/ServiceHosts.js';\r\nimport SharedMethods from '../Tools/SharedMethods.js';\r\n\r\nclass Auth {\r\n\r\n    constructor() {\r\n        var auth = localStorage.getItem(\"jwt\");\r\n        if(auth !== undefined && auth !== null && auth !== \"\") {\r\n            this.authenticated = true; \r\n        } else {\r\n            this.authenticated = false;\r\n        }\r\n    }\r\n\r\n    async login(credentials, onSuccess, onError, history) {\r\n\r\n        var url = ServiceHosts.getAuthenticationHost()+\"/account/login\";\r\n        var jsonBody = JSON.stringify({body:credentials});\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                cache: 'no-cache',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: jsonBody,\r\n            });\r\n\r\n            if(response.status === 200) {\r\n                response.json().then((res) => {\r\n                    if (res.status === 200) {\r\n\r\n                        this.authenticated = true;\r\n                        localStorage.setItem(\"jwt\", res.body.jwt);\r\n                        localStorage.setItem(\"name\", res.body.name);\r\n                        localStorage.setItem(\"lastname\", res.body.lastname);\r\n                        localStorage.setItem(\"username\", credentials.username);\r\n                        localStorage.setItem(\"userType\", res.body.userType); \r\n                        if (res.body.userType === \"Student\") {\r\n                            history.push(\"/student\");\r\n                        } else if (res.body.userType === \"Professor\") {\r\n                            history.push(\"/professor\");\r\n                        }\r\n\r\n                    } else {\r\n                        onError();\r\n                    }\r\n                }, (err) => {onError();});\r\n            } else {\r\n                onError();\r\n            }\r\n\r\n        } catch (error) {\r\n            onError();\r\n        }\r\n        \r\n    }\r\n\r\n    logout(history) {\r\n    \r\n        this.authenticated = false;\r\n        localStorage.removeItem(\"jwt\");\r\n        localStorage.removeItem(\"name\");\r\n        localStorage.removeItem(\"lastname\");\r\n        localStorage.removeItem(\"username\");\r\n        localStorage.removeItem(\"userType\"); \r\n    \r\n        history.push(\"/login\");\r\n    }\r\n\r\n    isAuthenticated(userType) {\r\n        if (userType === BasicModels.UserTypeBoth() || localStorage.getItem(\"userType\") === userType) {\r\n            return this.authenticated;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nexport default new Auth();","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\Tools\\SharedMethods.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClass.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorClasses.js",["104"],"import React from 'react';\r\nimport './ProfessorClasses.css';\r\nimport Header from '../UIComponents/Header';\r\nimport ServiceHosts from '../Tools/ServiceHosts';\r\nimport SharedMethods from '../Tools/SharedMethods';\r\nimport Authentication from '../authentication/Authentication';\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport BasicModels from '../Tools/BasicModels';\r\n\r\nclass ProfessorClasses extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"labClassesAndLabs\": [],\r\n            remountHeaderValue: Math.random()\r\n        };\r\n\r\n        this.openClass = this.openClass.bind(this);\r\n        this.loadUserClasses = this.loadUserClasses.bind(this);\r\n        this.remountHeaderFromClasses = this.remountHeaderFromClasses.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.loadUserClasses();\r\n        SharedMethods.blockNotificationsFrom(BasicModels.NotificationTypeNone());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    remountHeaderFromClasses() {\r\n        this.setState({\r\n            remountHeaderValue: Math.random()\r\n        });\r\n      }\r\n\r\n    openClass(e) {\r\n        e.preventDefault(false);\r\n        var id = e.target.id;\r\n        this.props.history.push(\"/professor/class/\"+id);\r\n    }\r\n\r\n    async loadUserClasses() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getClassesHost()+\"/classes/professor/get/by/me\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                labClassesAndLabs: sucess.body\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        var classes = this.state.labClassesAndLabs.map((labClassAndLabs) => {\r\n            return (\r\n                <div \r\n                    className=\"tile cancelEvents\" \r\n                    onClick={this.openClass} \r\n                    id={labClassAndLabs.labClass.labClassId} \r\n                    key={\"classes_lab_\"+labClassAndLabs.labClass.labClassId}\r\n                    style={{\"cursor\":\"pointer\"}}\r\n                >\r\n                    <div className=\"tile-header\">{labClassAndLabs.labClass.name}</div>\r\n                    <div className=\"tile-body\">\r\n                        <div className=\"tile-info\">\r\n                            <div className=\"tile-info-header\">Open for registrations</div>\r\n                            <div className=\"tile-info-body\">{(labClassAndLabs.labClass.openForRegistrations) ? (\"Open\") : (\"Closed\") }</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        classes = classes.length > 0 ? classes : \"There aren't any classes in your account yet.\";\r\n\r\n        return (\r\n            <div className=\"ProfessorClassesWrapper\">\r\n                <div className=\"ProfessorClasses\">\r\n\r\n                    <Header \r\n                        activeTab={\"class\"} \r\n                        history={this.props.history} \r\n                        remountHeader={this.remountHeaderFromClasses} \r\n                        key={this.state.remountHeaderValue} />\r\n                    \r\n                    <div className=\"container-info ProfessorClasses-new-post\">\r\n                        <div className=\"help-message\">Helpfull message here</div>\r\n                    </div>\r\n\r\n                    <div className=\"tiles\">\r\n                        {classes}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n          );\r\n    }\r\n\r\n}\r\n\r\nexport default ProfessorClasses;","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Classes.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\NewPost.js",["105","106","107","108"],"import React from 'react';\r\nimport './NewPost.css';\r\nimport Header from '../../UIComponents/Header';\r\nimport BasicModels from '../../Tools/BasicModels';\r\nimport ServiceHosts from '../../Tools/ServiceHosts';\r\nimport SharedMethods from '../../Tools/SharedMethods';\r\nimport Authentication from '../../authentication/Authentication';\r\n\r\nimport {\r\n    Link\r\n } from \"react-router-dom\";\r\n\r\nclass NewPost extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"labClassId\": this.props.match.params.link.split(\"-\")[1],\r\n            \"labClassesAndLabs\": [],\r\n            \"providedLab\": \"\",\r\n            \"labs\": [],\r\n            \"message\": \"\"\r\n        };\r\n        this.loadUserClasses = this.loadUserClasses.bind(this);\r\n        this.loadUserLab = this.loadUserLab.bind(this);\r\n        this.loadLabClassLabs = this.loadLabClassLabs.bind(this);\r\n        this.createPost = this.createPost.bind(this);\r\n        this.remountHeaderFromPost = this.remountHeaderFromPost.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.loadUserClasses();\r\n        SharedMethods.blockNotificationsFrom(BasicModels.NotificationTypeNone());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    remountHeaderFromPost() {\r\n        this.setState({\r\n            remountHeaderValue: Math.random()\r\n        });\r\n      }\r\n\r\n    async loadUserClasses() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getClassesHost()+\"/classes/student/get/by/me\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                labClassesAndLabs: sucess.body\r\n            }, () => {\r\n                this.loadUserLab();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async loadUserLab() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getClassesHost()+\"/classes/student/get/lab/by/me\";\r\n\r\n        var labClassObject = BasicModels.getLabClassModel();\r\n        var el = document.getElementById(\"labClassDropdown\");\r\n        labClassObject.labClassId = el.value;\r\n        var jsonBody = JSON.stringify({body:labClassObject});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                providedLab: sucess.body\r\n            }, () => {\r\n                if (this.state.labClassId !== \"\" && typeof this.state.labClassId !== \"undefined\") {\r\n                    el.value = this.state.labClassId;\r\n                }\r\n                this.loadLabClassLabs();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async loadLabClassLabs() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getClassesHost()+\"/classes/student/get/labs/by/class\";\r\n\r\n        var labClassObject = BasicModels.getLabClassModel();\r\n        var el = document.getElementById(\"labClassDropdown\");\r\n        labClassObject.labClassId = el.value;\r\n        var jsonBody = JSON.stringify({body:labClassObject});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                labs: sucess.body\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async createPost() {\r\n        \r\n        let readyToSend = true;\r\n\r\n        var labClassDropdown = document.getElementById(\"labClassDropdown\");\r\n        var labDropdown = document.getElementById(\"requestedLabDropdown\");\r\n\r\n        if (labClassDropdown.value === \"-1\" || labDropdown.value === \"-1\" || this.state.providedLab === \"\" || typeof this.state.providedLab === \"undefined\") {\r\n            readyToSend = false;\r\n        }\r\n\r\n        if(readyToSend) {\r\n    \r\n            let post = BasicModels.getPostModel();\r\n            post.providedLab.labId = this.state.providedLab.labId;\r\n            post.requestedLab.labId = labDropdown.value;\r\n            post.labClass.labClassId = labClassDropdown.value;\r\n            let jsonBody = JSON.stringify({body:post});\r\n    \r\n            var url = ServiceHosts.getClassesHost()+\"/posts/new\";\r\n    \r\n            SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n                this.setState({\r\n                    message: \"Post created!\"\r\n                });\r\n            }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let ableToMakeNewPost = true;\r\n\r\n        let backLink = \"/student/\" + this.props.match.params.link.replace(\"-\", \"/\");\r\n\r\n        let labClassOptions = this.state.labClassesAndLabs.map((labClassAndLab, index) => {\r\n            return (\r\n                <option value={labClassAndLab.labClass.labClassId} key={\"labclassoptions_\"+labClassAndLab.labClass.labClassId+index} >{labClassAndLab.labClass.name}</option>\r\n            );\r\n        });\r\n\r\n        if (labClassOptions.length <= 0) {\r\n            labClassOptions = <option value=\"-1\">No Classes</option>;\r\n            ableToMakeNewPost = false;\r\n        }\r\n\r\n        let title = \"New post\";\r\n\r\n        let labClassAndLab = this.state.labClassesAndLabs.filter(labClassAndLab => labClassAndLab.labClass.labClassId === this.state.labClassId);\r\n    \r\n        title += (labClassAndLab.length > 0 ? (\": \" + labClassAndLab[0].labClass.name) : \"\");\r\n\r\n        let labOptions = this.state.labs.map((lab, index) => {\r\n            if (lab.labId !== this.state.providedLab.labId) {\r\n                return (\r\n                    <option key={\"labs_\"+lab.labId+index} value={lab.labId}>{lab.name}</option>\r\n                );\r\n            } else return null;\r\n        });\r\n\r\n        if (labOptions.length <= 0) {\r\n            labOptions = <option value=\"-1\">No labs for this class</option>;\r\n            ableToMakeNewPost = false;\r\n        } else {\r\n            labOptions.push(\r\n                <option key={\"labs_xxx_111_all\"} value={'0'}>{\"Open to suggestions\"}</option>\r\n            );\r\n        }\r\n        \r\n        let providedLabName = \"You don't have an assigned lab for this class\";\r\n\r\n        if (this.state.providedLab !== null && typeof this.state.providedLab !== \"undefined\" && this.state.providedLab !== {}) {\r\n            providedLabName = this.state.providedLab.name;\r\n            ableToMakeNewPost = false;\r\n        }\r\n\r\n\r\n        let isAvailableCss = \"\";\r\n        let isAvailableMessage = \"\";\r\n        if (ableToMakeNewPost) {\r\n            isAvailableCss = \"not-available\";\r\n            isAvailableMessage = \"You don't have all the necessary info to create a post\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"NewPostWrapper\">\r\n                <div className=\"NewPost\">\r\n\r\n                    <Header \r\n                        activeTab={\"class\"} \r\n                        history={this.props.history} \r\n                        remountHeader={this.remountHeaderFromPost} \r\n                        key={this.state.remountHeaderValue} />\r\n\r\n                    <div className={\"NewPost-container\"}>\r\n                        <div className=\"NewPost-header\">\r\n                            <div className=\"NewPost-title\">{title}</div>\r\n                            <Link className=\"NewPost-back\" to={backLink}>\r\n                                <i className=\"fa fa-arrow-left\" />\r\n                            </Link>\r\n                        </div>\r\n                        <div className={\"NewPost-body\"}>\r\n                            \r\n                            <div className=\"row\">\r\n                                <p className=\"text\">{isAvailableMessage}</p>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <p className=\"text\">{this.state.message}</p>\r\n                            </div>\r\n\r\n                            <div className={\"row\" + \" \" + isAvailableCss}>\r\n                                <p className=\"text\">Post for Class</p>\r\n                                <i className=\"fa fa-angle-right\" />\r\n                                <select className=\"dropdown\" id=\"labClassDropdown\" onChange={this.loadUserLab} >\r\n                                    {labClassOptions}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={\"row\" + \" \" + isAvailableCss}>\r\n                                <p className=\"text\">My Assigend Lab</p>\r\n                                <i className=\"fa fa-angle-right\" />\r\n                                <p className=\"text\">{providedLabName}</p>\r\n                            </div>\r\n\r\n                            <div className={\"row\" + \" \" + isAvailableCss}>\r\n                                <p className=\"text\">Looking for Lab</p>\r\n                                <i className=\"fa fa-angle-right\" />\r\n                                <select className=\"dropdown\" id=\"requestedLabDropdown\" >\r\n                                    {labOptions}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={\"row\" + \" \" + isAvailableCss}>\r\n                                <button onClick={this.createPost}>Create</button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n          );\r\n    }\r\n\r\n}\r\n\r\nexport default NewPost;","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\MyPosts.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\classComponents\\Class.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\postComponents\\Applications.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Messenger.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chat.js",["109","110"],"import React from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport BasicModels from '../../Tools/BasicModels';\r\nimport './Chat.css';\r\nimport ServiceHosts from '../../Tools/ServiceHosts';\r\nimport SharedMethods from '../../Tools/SharedMethods';\r\nimport Authentication from '../../authentication/Authentication';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    _isMounted = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            activeChatroom: null,\r\n            conversation: [],\r\n            conversationQueue: \"\",\r\n            message: \"\",\r\n            chatClient: null\r\n        };\r\n\r\n        this.getConversation = this.getConversation.bind(this);\r\n        this.getConversationQueue = this.getConversationQueue.bind(this);\r\n        this.subscribeToConversationQueue = this.subscribeToConversationQueue.bind(this);\r\n        this.subscribeToConversationQueueCallback = this.subscribeToConversationQueueCallback.bind(this);\r\n        this.disconnectFromQueue = this.disconnectFromQueue.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.onMessageChange = this.onMessageChange.bind(this);\r\n        this.chatFilter = this.chatFilter.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        if(this.state.activeChatroom !== this.props.activeChatroom) {\r\n            this.setState({\r\n                activeChatroom: this.props.activeChatroom\r\n            }, \r\n                ()=>{this.getConversation()}\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.state.activeChatroom !== this.props.activeChatroom) {\r\n            this.setState({\r\n                activeChatroom: this.props.activeChatroom\r\n            }, \r\n                ()=>{this.getConversation()}\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n        this.disconnectFromQueue();\r\n    }\r\n\r\n    async getConversation() {\r\n\r\n        if (!this._isMounted) {return;}\r\n        \r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            return;\r\n        }\r\n\r\n        var url = ServiceHosts.getMessengerHost()+\"/messenger/student/conversation\";\r\n        \r\n        var jsonBody = JSON.stringify({body:this.state.activeChatroom});\r\n\r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                conversation: sucess.body\r\n            }, () => {\r\n                this.chatFilter();\r\n                if (this.state.conversationQueue === \"\") {\r\n                    this.getConversationQueue();\r\n                }\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async getConversationQueue() {\r\n\r\n        if (!this._isMounted) {return;}\r\n\r\n        var url = ServiceHosts.getNotificationsHost()+\"/notifications/get/conversation-queue\";\r\n\r\n        var jsonBody = JSON.stringify({body:\"\"});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.setState({\r\n                conversationQueue: sucess.body.queue\r\n            }, () => {\r\n                this.subscribeToConversationQueue();\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    async subscribeToConversationQueue() {\r\n\r\n        if (typeof this.state.conversationQueue === \"undefined\" || this.state.conversationQueue === \"\" || this.state.conversationQueue === null) {\r\n            return;\r\n        }\r\n\r\n        var ws = new SockJS(ServiceHosts.getNotificationsHost()+'/ws');\r\n        var client = Stomp.over(ws);\r\n        client.debug = null;\r\n\r\n        var headers = {\r\n          \"login\": \"guest\",\r\n          \"passcode\": \"guest\",\r\n          'X-Authorization': localStorage.getItem(\"jwt\")\r\n        };\r\n\r\n        client.connect(\r\n            headers, \r\n            () => {\r\n\r\n                var subscription = client.subscribe(\r\n                    \"/queue/\" + this.state.conversationQueue, \r\n                    this.subscribeToConversationQueueCallback,\r\n                    {'X-Authorization': localStorage.getItem(\"jwt\")}\r\n                );\r\n\r\n            },(error) => { console.log(error); }\r\n        );\r\n\r\n        // client.heartbeat.outgoing = 1000; // client will send heartbeats every 20000ms\r\n        // client.heartbeat.incoming = 0;\r\n\r\n        this.setState({\r\n            client: client\r\n        });\r\n\r\n    }\r\n\r\n    subscribeToConversationQueueCallback(object) {\r\n        var message = JSON.parse(object.body);\r\n        this.getConversation();\r\n    }\r\n\r\n    disconnectFromQueue() {\r\n        if(this.state.client !== null && typeof this.state.client !== \"undefined\") {\r\n            this.state.client.disconnect(()=>{\r\n                //console.log(\"disconected\");\r\n            });    \r\n        }\r\n    }\r\n\r\n    async sendMessage() {\r\n\r\n        let url = ServiceHosts.getMessengerHost()+\"/messenger/student/message\";\r\n\r\n        let body = BasicModels.getMessageModel();\r\n        body.chatroom = this.state.activeChatroom;\r\n        body.message = this.state.message;\r\n        let jsonBody = JSON.stringify({body:body});\r\n        \r\n        SharedMethods.authPost(url, jsonBody, (sucess) => {\r\n            this.getConversation();\r\n            this.setState({\r\n                message: \"\"\r\n            });\r\n        }, (err) => {Authentication.logout(this.props.history);});\r\n\r\n    }\r\n\r\n    chatFilter() {\r\n\r\n        var chatContainer = document.getElementById(\"chatContainer\");\r\n\r\n        chatContainer.scrollTop = chatContainer.scrollHeight;\r\n\r\n        var conversation = this.state.conversation;\r\n\r\n        conversation.sort((a, b) => {\r\n            return a.timestamp - b.timestamp;\r\n        });\r\n\r\n        this.setState({\r\n            conversation: conversation\r\n        });\r\n\r\n    }\r\n\r\n    onMessageChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        var conversation = this.state.conversation.map((message, index) => {\r\n            var receiveOrSendCss = (message.senderUser.username === localStorage.getItem(\"username\")) ? \"sended\" : \"received\";\r\n            return (\r\n                <div className={\"message-body \"+receiveOrSendCss} key={\"chat_conversation_\"+index}>\r\n                    <div className={\"message \"+receiveOrSendCss}>\r\n                        {message.message}\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        {SharedMethods.dateSince(message.timestamp)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        conversation = conversation.length > 0 ? conversation : \"Say Hello!\";\r\n        let conversationTitle = \"\";\r\n\r\n        if (typeof this.state.activeChatroom === \"undefined\" || this.state.activeChatroom === null || this.state.activeChatroom === \"\") {\r\n            conversation = \"Choose a conversation to send messages\";\r\n        } else {\r\n            let chatroomName = this.state.activeChatroom.chatroomName.replace(localStorage.getItem(\"name\"), \"\");\r\n            chatroomName = chatroomName.replace(localStorage.getItem(\"lastname\"), \"\");\r\n            conversationTitle = chatroomName;\r\n        }\r\n\r\n        return(\r\n            <div className=\"Chat\">\r\n\r\n                <div className=\"title\">\r\n                    <button onClick={this.props.toggleChats} >\r\n                        <i className=\"fa fa-users\" />\r\n                    </button>\r\n                    <p>{conversationTitle}</p>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n\r\n                    <div className=\"chat\" id=\"chatContainer\">\r\n                        {conversation}\r\n                    </div>\r\n\r\n                    <div className=\"keyboard\">\r\n                        \r\n                        <textarea \r\n                            placeholder=\"Hello\"\r\n                            value={this.state.message} \r\n                            onChange={this.onMessageChange}  />\r\n\r\n                        <button onClick={this.sendMessage}>\r\n                            <i className=\"fa fa-paper-plane\" />\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\StudentViews\\messenger\\Chats.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\ProfessorLab.js",[],"C:\\Users\\john\\Documents\\Projects\\LabExchange_WebApplication\\src\\ProfessorViews\\LabExchanges.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":26,"column":3,"nodeType":"117","messageId":"118","endLine":28,"endColumn":4},{"ruleId":"119","severity":1,"message":"120","line":177,"column":21,"nodeType":"121","messageId":"122","endLine":177,"endColumn":33},{"ruleId":"119","severity":1,"message":"123","line":198,"column":13,"nodeType":"121","messageId":"122","endLine":198,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":321,"column":45,"nodeType":"126","messageId":"127","endLine":321,"endColumn":46},{"ruleId":"119","severity":1,"message":"128","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":21},{"ruleId":"119","severity":1,"message":"129","line":9,"column":5,"nodeType":"121","messageId":"122","endLine":9,"endColumn":9},{"ruleId":"124","severity":1,"message":"125","line":223,"column":51,"nodeType":"126","messageId":"127","endLine":223,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":231,"column":51,"nodeType":"126","messageId":"127","endLine":231,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":237,"column":51,"nodeType":"126","messageId":"127","endLine":237,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":245,"column":51,"nodeType":"126","messageId":"127","endLine":245,"endColumn":52},{"ruleId":"119","severity":1,"message":"120","line":124,"column":21,"nodeType":"121","messageId":"122","endLine":124,"endColumn":33},{"ruleId":"119","severity":1,"message":"123","line":143,"column":13,"nodeType":"121","messageId":"122","endLine":143,"endColumn":20},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'subscription' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'SharedMethods' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]