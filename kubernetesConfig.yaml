# =================== Ingress =====================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: default-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    kubernetes.io/ingress.class: nginx
    #nginx.org/ssl-services: "my-svc" # fake kubernetes certificate
spec:
  rules:
  - host: lab-exchange.com
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: webapp-service
            port:
              number: 8080
      - path: /api/authentication-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: authentication-service
            port:
              number: 8081
      - path: /api/classes-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: classes-service
            port:
              number: 8082
      - path: /api/notifications-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: notifications-service
            port:
              number: 8083
      - path: /api/messenger-service/(.*)
        pathType: Prefix
        backend:
          service:
            name: messenger-service
            port:
              number: 8084

---

# =================== MongoDB =====================

# K8 Service Config | MongoDB Service

apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
  type: NodePort

---

# K8 Persistent Volume Claim Config | MongoDB Service

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi

---

# K8 Deployment Config | MongoDB Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      volumes:
          - name: storage
            persistentVolumeClaim:
              claimName: mongodb-pvc
      containers:
      - name: mongodb
        image: mongo
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 27017
        volumeMounts:
          - mountPath: /data/db
            name: storage

---

# =================== RabbitMQ =====================

# K8 Service Config | RabbitMQ Service

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      name: rabbitmq-p0
      port: 5672
      targetPort: 5672
    - protocol: TCP
      name: rabbitmq-p1
      port: 15672
      targetPort: 15672
    - protocol: TCP
      name: rabbitmq-p2
      port: 61613
      targetPort: 61613
  type: NodePort

---

# K8 Persistent Volume Claim 1 Config | RabbitMQ Service

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi

---

# K8 Deployment Config | RabbitMQ Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: lab_exchange_rabbitmq_service
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: "/var/lib/rabbitmq/"
            name: storage
          - mountPath: "/var/log/rabbitmq"
            name: storage
        ports:
        - containerPort: 5672
        - containerPort: 15672
        - containerPort: 61613
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: rabbitmq-pvc

---

# =================== Authentication =====================

# K8 Service Config | Authentication Service

apiVersion: v1
kind: Service
metadata:
  name: authentication-service
spec:
  selector:
    app: authentication
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: NodePort

---

# K8 Deployment Config | Authentication Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication-deployment
  labels:
    app: authentication
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentication
  template:
    metadata:
      labels:
        app: authentication
    spec:
      containers:
      - name: authentication
        image: lab_exchange_authentication_service
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
        env:
          - name: MONGO_HOST
            value: mongodb-service

---

# =================== Classes =====================

# K8 Service Config | Classes Service

apiVersion: v1
kind: Service
metadata:
  name: classes-service
spec:
  selector:
    app: classes
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
  type: NodePort

---

# K8 Deployment Config | Classes Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: classes-deployment
  labels:
    app: classes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: classes
  template:
    metadata:
      labels:
        app: classes
    spec:
      containers:
      - name: classes
        image: lab_exchange_classes_service
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
        env:
          - name: MONGO_HOST
            value: mongodb-service
          - name: AUTHENTICATION_HOST
            value: authentication-service
          - name: NOTIFICATIONS_HOST
            value: notifications-service

---

# =================== Messenger =====================

# K8 Service Config | Messenger Service

apiVersion: v1
kind: Service
metadata:
  name: messenger-service
spec:
  selector:
    app: messenger
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 8084
  type: NodePort

---

# K8 Deployment Config | Messenger Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: messenger-deployment
  labels:
    app: messenger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messenger
  template:
    metadata:
      labels:
        app: messenger
    spec:
      containers:
      - name: messenger
        image: lab_exchange_messenger_service
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8084
        env:
          - name: MONGO_HOST
            value: mongodb-service
          - name: NOTIFICATIONS_HOST
            value: notifications-service
          - name: CLASSES_HOST
            value: classes-service

---

# =================== Notifications =====================

# K8 Service Config | Notifications Service

apiVersion: v1
kind: Service
metadata:
  name: notifications-service
spec:
  selector:
    app: notifications
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: NodePort

---

# K8 Deployment Config | Notifications Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-deployment
  labels:
    app: notifications
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notifications
  template:
    metadata:
      labels:
        app: notifications
    spec:
      containers:
      - name: notifications
        image: lab_exchange_notifications_service
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8083
        env:
          - name: MONGO_HOST
            value: mongodb-service
          - name: RABBITMQ_HOST
            value: rabbitmq-service

---

# =================== Web Application =====================

# K8 Service Config | WebApp Service

apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  selector:
    app: webapp
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 3000
  type: NodePort

---

# K8 Deployment Config | WebApp Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: lab_exchange_webapp_service
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000

---